/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package drive.mate.learner;

import static drive.mate.learner.DatabaseConnection.getConnection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.*;
import drive.mate.learner.SelectLanguage;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import org.apache.commons.lang3.text.WordUtils;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;

/**
 *
 * @author smbha
 */
public class LearnerMenuScreen extends javax.swing.JFrame {

    public static String selectedLanguage;
    public static String nicNo;
    public static String userName;

    /**
     * Creates new form LearnerMenuScreen
     */
    public LearnerMenuScreen(String selectedLanguage, String nicNo) {
        this.selectedLanguage = selectedLanguage;
        this.nicNo = nicNo;
        initComponents(); // Move initComponents() call to here

        // Get user name
        userName = getUserName(nicNo);
        this.userName = userName;

        // Set NIC number and user name labels
        nicnolbl.setText(nicNo);
        usernamelbl.setText(userName);

        this.setExtendedState(this.MAXIMIZED_BOTH);
        setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                AlertMessages.conformExit();
            }
        });

        if (selectedLanguage.equals("Sinhala")) {
            logoutBtn.setText("පිටවීම");
            menulbl.setText("ප්‍රධාන මෙනුව");
            namelbl.setText("නම");
            getMaterialsbtn.setText("ඉගෙනුම් උපකාරක");
            getExambtn.setText("පරීක්ෂණය");

        } else if (selectedLanguage.equals("Tamil")) {
            logoutBtn.setText("வெளியேறு");
            menulbl.setText("மெனு");
            namelbl.setText("பெயர்");
            getMaterialsbtn.setText("கற்றுக்கொள்ள பெற");
            getExambtn.setText("தேர்வு பெற");

        } else if (selectedLanguage.equals("English")) {
            logoutBtn.setText("LOGOUT");
            menulbl.setText("MAIN MENU");
            namelbl.setText("NAME");
            getMaterialsbtn.setText("LEARNING MATERIALS");
            getExambtn.setText("TEST");
        }
    }

    public static String getUserName(String nicNo) {
        String userName = "";

        try (
                Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement("SELECT name FROM users WHERE nicno = ?")) {

            stmt.setString(1, nicNo);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    userName = rs.getString("name");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return userName;
    }
    
        //Get Enum count
    private static String[] getEnumNames(Class<? extends Enum<?>> e) {
        return Arrays.stream(e.getEnumConstants()).map(Enum::name).toArray(String[]::new);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menulbl = new javax.swing.JLabel();
        usernamelbl = new javax.swing.JLabel();
        nicnolbl = new javax.swing.JLabel();
        namelbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        getExambtn = new javax.swing.JButton();
        getMaterialsbtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        logoutBtn = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menulbl.setFont(new java.awt.Font("Nirmala UI", 1, 36)); // NOI18N
        menulbl.setForeground(new java.awt.Color(255, 255, 0));
        menulbl.setText("Main Menu");

        usernamelbl.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        usernamelbl.setForeground(new java.awt.Color(204, 204, 204));
        usernamelbl.setText("name");

        nicnolbl.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        nicnolbl.setForeground(new java.awt.Color(204, 204, 204));
        nicnolbl.setText("nic");

        namelbl.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        namelbl.setText("NAME :");

        jLabel3.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        jLabel3.setText("NIC :");

        getExambtn.setBackground(new java.awt.Color(255, 255, 0));
        getExambtn.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        getExambtn.setForeground(new java.awt.Color(31, 31, 31));
        getExambtn.setText("TEST");
        getExambtn.setBorder(null);
        getExambtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getExambtn.setPreferredSize(new java.awt.Dimension(250, 80));
        getExambtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getExambtnActionPerformed(evt);
            }
        });

        getMaterialsbtn.setBackground(new java.awt.Color(255, 255, 0));
        getMaterialsbtn.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        getMaterialsbtn.setForeground(new java.awt.Color(31, 31, 31));
        getMaterialsbtn.setText("learning materials");
        getMaterialsbtn.setBorder(null);
        getMaterialsbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getMaterialsbtn.setPreferredSize(new java.awt.Dimension(250, 80));
        getMaterialsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMaterialsbtnActionPerformed(evt);
            }
        });

        logoutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/logout.png"))); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.setFont(new java.awt.Font("Nirmala UI", 1, 14)); // NOI18N
        logoutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutBtnMouseClicked(evt);
            }
        });
        jMenuBar1.add(logoutBtn);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menulbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(namelbl))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernamelbl)
                                    .addComponent(nicnolbl))))
                        .addGap(125, 125, 125))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(getMaterialsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(getExambtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(311, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(menulbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namelbl)
                    .addComponent(nicnolbl))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(usernamelbl))
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getExambtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getMaterialsbtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(328, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {getExambtn, getMaterialsbtn});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutBtnMouseClicked
        new SelectLanguage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutBtnMouseClicked

    private void getExambtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getExambtnActionPerformed
        new TestScreen(selectedLanguage, nicNo).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_getExambtnActionPerformed


    private void getMaterialsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getMaterialsbtnActionPerformed
        pdfList(selectedLanguage);
    }//GEN-LAST:event_getMaterialsbtnActionPerformed

    enum Folder {
        biginers_tips, past_papers, road_signs
    }

    private void pdfList(String language) {

        String frameTitle = null;

        String pdfPath = System.getProperty("user.dir");

//        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//        int screenWidth = (int) screenSize.getWidth();
//        int screenHeight = (int) screenSize.getHeight();
        JFrame pdfListFrame = new JFrame("PDF List");
        pdfListFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        pdfListFrame.setSize(1000, 600);
        pdfListFrame. setExtendedState(JFrame.MAXIMIZED_BOTH);
        pdfListFrame.setLayout(new BorderLayout());

        pdfListFrame.setLocationByPlatform(true);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1, 3, 10, 10));

//        int color = 1;
        for (String subFolder : getEnumNames(Folder.class)) {

            JPanel column = new JPanel();
            column.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
//            column.setBackground(color == 1 ? new Color(255, 255, 0) : color == 2 ? new Color(153, 255, 153) : color == 3 ? new Color(255, 102, 102) : null);
            column.setLayout(new BoxLayout(column, BoxLayout.Y_AXIS));

            JLabel columnLabel = new JLabel(WordUtils.capitalizeFully(subFolder, '_').replace("_", " "), SwingConstants.CENTER);
            columnLabel.setFont(new Font("Nirmala UI,", Font.BOLD, 18));
            columnLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            columnLabel.setForeground(Color.WHITE);
            column.add(columnLabel);
            column.add(Box.createVerticalStrut(10));

            File folder = new File(pdfPath + "/resources/pdf/" + language.toLowerCase() + "/" + subFolder);
            List<String> pdfs = findPDFFiles(folder);

            for (String pdf : pdfs) {
                JButton button = new JButton(pdf);
//                button.setFont(new Font("Serif", Font.PLAIN, 18));
                button.setMaximumSize(new Dimension(250, 30));
                button.setPreferredSize(new Dimension(250, 30));
                button.setAlignmentX(Component.CENTER_ALIGNMENT);

                button.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 1) {
                            onPDFItemClick(pdf, language, subFolder);
                        }
                    }

                });

//                button.addActionListener(new ActionListener() {
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                        onPDFItemClick(pdf, language, subFolder);
//                    }
//
//                });
                column.add(button);
                column.add(Box.createVerticalStrut(10));
            }

            JScrollPane scrollPane = new JScrollPane(column);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

            mainPanel.add(scrollPane);

//            color++;
        }

        pdfListFrame.add(mainPanel, BorderLayout.CENTER);

        switch (language) {
            case "Sinhala":
                frameTitle = "පන්ති කාමරය";
                break;
            case "English":
                frameTitle = "Class Room";
                break;
            case "Tamil":
                frameTitle = "வகுப்பறை";
                break;

        }

        JLabel titleLabel = new JLabel(frameTitle, SwingConstants.CENTER);
        titleLabel.setFont(new Font("Nirmala UI", Font.BOLD, 24));
        pdfListFrame.add(titleLabel, BorderLayout.NORTH);

        pdfListFrame.setVisible(true);

    }

    private void onPDFItemClick(String selectedPDF, String language, String subFolder) {
        System.out.println(language);
        System.out.println(language.toLowerCase());
        System.out.println("PDF clicked **: " + selectedPDF);
        try {
            String pdfPath = System.getProperty("user.dir");// + "/resources/pdf/" + language.toLowerCase() + "/" + selectedPDF;
            File pdfFile = new File(pdfPath + "/resources/pdf/" + language.toLowerCase() + "/" + subFolder + "/" + selectedPDF);
            System.out.println(pdfFile.exists());
            System.out.println(pdfFile);

            if (pdfFile.exists()) {
                System.out.println("pdf file exits");
//                Desktop.getDesktop().open(pdfFile);
                displayPDF(pdfFile);
            } else {
                System.out.println("File not found: " + pdfFile.getAbsolutePath());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private List<String> findPDFFiles(File folder) {
        List<String> filesList = new ArrayList<>();

        if (folder.exists() && folder.isDirectory()) {
            File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".pdf"));
            if (files != null) {
                for (File file : files) {
                    filesList.add(file.getName());
                }
            } else {
                System.out.println("The folder is empty or can't access.");
            }
        } else {
            System.out.println("The seleted folder does not exist or is not a directory.");
        }
        System.out.println("Pdf found:" + filesList);
        return filesList;
    }

    private void displayPDF(File pdfFile) {
          new PDFViewerFrame(pdfFile,900,600).setVisible(true);
//        try (PDDocument document = Loader.loadPDF(pdfFile)) {
//
//            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
//            int screenWidth = (int) screenSize.getWidth();
//            int screenHeight = (int) screenSize.getHeight();
//
//            JFrame jframe = new JFrame("PDF Viewer");
//            jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
//            jframe.setSize(screenWidth, screenHeight);
//
//            JPanel mainPanel = new JPanel();
//            mainPanel.setLayout(new BorderLayout());
//
//            PDFRenderer pdfRenderer = new PDFRenderer(document);
//
//            BufferedImage image = pdfRenderer.renderImageWithDPI(0, 300, ImageType.RGB); // Render first page at 300 DPI
//
//            double scaleX = (double) screenWidth / image.getWidth();
//            double scaleY = (double) screenHeight / image.getHeight();
//            double scale = Math.min(scaleX, scaleY);
//
//            AffineTransform at = AffineTransform.getScaleInstance(scale, scale);
//            AffineTransformOp scaleOp = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
//            BufferedImage scaledImage = scaleOp.filter(image, null);
//
//            JLabel pdfLabel = new JLabel(new ImageIcon(scaledImage));
//            mainPanel.removeAll();
//            mainPanel.add(new JScrollPane(pdfLabel), BorderLayout.CENTER);
//            mainPanel.revalidate();
//            mainPanel.repaint();
//
//            jframe.add(mainPanel);
//
//            jframe.setVisible(true);
//        } catch (IOException ex) {
//            java.util.logging.Logger.getLogger(LearnerMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LearnerMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LearnerMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LearnerMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LearnerMenuScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LearnerMenuScreen(selectedLanguage, nicNo).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getExambtn;
    private javax.swing.JButton getMaterialsbtn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu logoutBtn;
    private javax.swing.JLabel menulbl;
    private javax.swing.JLabel namelbl;
    private javax.swing.JLabel nicnolbl;
    private javax.swing.JLabel usernamelbl;
    // End of variables declaration//GEN-END:variables
}
